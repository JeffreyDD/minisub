{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the MiniSub project MiniSub is a project to learn about embedded systems development in a challenging underwater environment. It is driven using ROS2 and MicroROS, through a custom node running on an ESP32 microcontroller. Project status The project is currently in a \"feasibility research\" phase, where I'm just building a simple test device. Project goals To design an open source autonomous underwater vehicle using affordable, off-the-shelf and 3d printed components which is able to safely reach a depth of at least 50 meters. To learn about using ROS to operate the various systems required to run the vehicle (autonomously). To learn about embedded development by implementing a custom MicroROS node to run all vehicle controls and telemetry. To learn about machine learning and computer vision using depth cameras to scan the sea/river/lakebed.","title":"Project"},{"location":"#welcome-to-the-minisub-project","text":"MiniSub is a project to learn about embedded systems development in a challenging underwater environment. It is driven using ROS2 and MicroROS, through a custom node running on an ESP32 microcontroller.","title":"Welcome to the MiniSub project"},{"location":"#project-status","text":"The project is currently in a \"feasibility research\" phase, where I'm just building a simple test device.","title":"Project status"},{"location":"#project-goals","text":"To design an open source autonomous underwater vehicle using affordable, off-the-shelf and 3d printed components which is able to safely reach a depth of at least 50 meters. To learn about using ROS to operate the various systems required to run the vehicle (autonomously). To learn about embedded development by implementing a custom MicroROS node to run all vehicle controls and telemetry. To learn about machine learning and computer vision using depth cameras to scan the sea/river/lakebed.","title":"Project goals"},{"location":"MicroROS-Node/","text":"MicroROS Node The MicroROS node is responsible for communicating between MiniSub's hardware and the ROS nodes responsible for driving MiniSub. The node is built using micro-ROS for Arduino , which offers a low-level entry into MicroROS development, especially when used in combination with PlatformIO . It is also easier to build and flash microcontrollers from PlatformIO than using (Micro)ROS's own, custom build toolchain. Note Recently, MicroROS has released MicroROS for PlatformIO , which has not yet been tested / integrated with this project. A single codebase is used to implement all functionality required by MiniSub. Publishers and Subscribers can be enabled and disabled using build flags, but all components can run on a single node as well. Currently used hardware An ESP32 is used as the main microcontroller Currently only Wifi transport is supported, though ethernet and serial transports will be supported in the near future An MPU9250 is used to gather IMU data Generic reversible ESCs are used, simply driven using a PWM signal straight from the ESP32 Inside MiniSub, a LM2596 voltage regulator is used to regulate battery voltage (which should be between 12-24V) down to 5V.","title":"MicroROS Node"},{"location":"MicroROS-Node/#microros-node","text":"The MicroROS node is responsible for communicating between MiniSub's hardware and the ROS nodes responsible for driving MiniSub. The node is built using micro-ROS for Arduino , which offers a low-level entry into MicroROS development, especially when used in combination with PlatformIO . It is also easier to build and flash microcontrollers from PlatformIO than using (Micro)ROS's own, custom build toolchain. Note Recently, MicroROS has released MicroROS for PlatformIO , which has not yet been tested / integrated with this project. A single codebase is used to implement all functionality required by MiniSub. Publishers and Subscribers can be enabled and disabled using build flags, but all components can run on a single node as well.","title":"MicroROS Node"},{"location":"MicroROS-Node/#currently-used-hardware","text":"An ESP32 is used as the main microcontroller Currently only Wifi transport is supported, though ethernet and serial transports will be supported in the near future An MPU9250 is used to gather IMU data Generic reversible ESCs are used, simply driven using a PWM signal straight from the ESP32 Inside MiniSub, a LM2596 voltage regulator is used to regulate battery voltage (which should be between 12-24V) down to 5V.","title":"Currently used hardware"},{"location":"MicroROS-Node/imu/","text":"IMU Publisher The IMU Publisher is responsible for sending IMU messages containing the current orientation of the vehicle. This is currently implemented by reading acceleration from a MPU9250 over I2C, and simply broadcasting messages as quickly as possible.","title":"IMU Publisher"},{"location":"MicroROS-Node/imu/#imu-publisher","text":"The IMU Publisher is responsible for sending IMU messages containing the current orientation of the vehicle. This is currently implemented by reading acceleration from a MPU9250 over I2C, and simply broadcasting messages as quickly as possible.","title":"IMU Publisher"},{"location":"MicroROS-Node/motor_control/","text":"Motor Control Subscriber The Motor Control Subscriber is responsible for applying Twist messages to the motors it controls. It does so by sending a PWM control signal to standard RC Electronic Speed Controllers (ESCs).","title":"Motor Control Subscriber"},{"location":"MicroROS-Node/motor_control/#motor-control-subscriber","text":"The Motor Control Subscriber is responsible for applying Twist messages to the motors it controls. It does so by sending a PWM control signal to standard RC Electronic Speed Controllers (ESCs).","title":"Motor Control Subscriber"},{"location":"ROS2-Implementation/","text":"MiniSub & ROS2 MiniSub is controlled through ROS2. Being an underwater robot, MiniSub can rely on the ROS ecosystem to provide professional control interfaces and other required software components. ROS Packages We aim to only use ROS packages which are available as prebuilt packages, either using .deb packages on linux, or using conda packages on Windows and MacOS. More on setting up the MiniSub ROS workspace can be found on the setup page .","title":"MiniSub & ROS2"},{"location":"ROS2-Implementation/#minisub-ros2","text":"MiniSub is controlled through ROS2. Being an underwater robot, MiniSub can rely on the ROS ecosystem to provide professional control interfaces and other required software components.","title":"MiniSub &amp; ROS2"},{"location":"ROS2-Implementation/#ros-packages","text":"We aim to only use ROS packages which are available as prebuilt packages, either using .deb packages on linux, or using conda packages on Windows and MacOS. More on setting up the MiniSub ROS workspace can be found on the setup page .","title":"ROS Packages"},{"location":"ROS2-Implementation/architecture/","text":"MiniSub Architecture Local setup (test rig) Local is easiest to use when testing locally as it only requires a single computer, and communicates with the vehicle over the ESP32's WiFi directly. flowchart LR joystick[USB Joystick]-->joy_node subgraph base [Laptop / other computer] joy_node[ROS2 Joy Node] joy_teleop_node[ROS2 Joy Teleop Node] agent_node[MicroROS Agent Node] end esp32node-->agent_node subgraph esp32node [ESP32 Node] motor_sub[Motor PWM Control Subscriber] imu_pub[IMU Publisher] end Remote setup (MicroSub) The Remote setup is more robust and intended to allow the vehicle to perform autonomously while providing various methods to connect to the vehicle over long distances. flowchart LR joystick[USB Joystick]-->joy_node subgraph laptop [Shore Laptop / other computer] joy_node[ROS2 Joy Node] joy_teleop_node[ROS2 Joy Teleop Node] end subgraph controller [RasPI Controlller on Vessel] agent_node[MicroROS Agent Node] metric_exporter_node[Metric Exporter Node] prometheus[Prometheus TSDB] prometheus-->metric_exporter_node end laptop<-- wifi -->controller subgraph thruster_node [ESP32 Thruster Nodes] thruster_twist_sub[Motor Control PWM Twist Subscriber] thruster_power_pub[Power Consumption Data Publisher] end subgraph imu_node [ESP32 IMU Node] imu_pub[IMU Publisher] end thruster_node-->agent_node imu_node-->agent_node","title":"MiniSub Architecture"},{"location":"ROS2-Implementation/architecture/#minisub-architecture","text":"","title":"MiniSub Architecture"},{"location":"ROS2-Implementation/architecture/#local-setup-test-rig","text":"Local is easiest to use when testing locally as it only requires a single computer, and communicates with the vehicle over the ESP32's WiFi directly. flowchart LR joystick[USB Joystick]-->joy_node subgraph base [Laptop / other computer] joy_node[ROS2 Joy Node] joy_teleop_node[ROS2 Joy Teleop Node] agent_node[MicroROS Agent Node] end esp32node-->agent_node subgraph esp32node [ESP32 Node] motor_sub[Motor PWM Control Subscriber] imu_pub[IMU Publisher] end","title":"Local setup (test rig)"},{"location":"ROS2-Implementation/architecture/#remote-setup-microsub","text":"The Remote setup is more robust and intended to allow the vehicle to perform autonomously while providing various methods to connect to the vehicle over long distances. flowchart LR joystick[USB Joystick]-->joy_node subgraph laptop [Shore Laptop / other computer] joy_node[ROS2 Joy Node] joy_teleop_node[ROS2 Joy Teleop Node] end subgraph controller [RasPI Controlller on Vessel] agent_node[MicroROS Agent Node] metric_exporter_node[Metric Exporter Node] prometheus[Prometheus TSDB] prometheus-->metric_exporter_node end laptop<-- wifi -->controller subgraph thruster_node [ESP32 Thruster Nodes] thruster_twist_sub[Motor Control PWM Twist Subscriber] thruster_power_pub[Power Consumption Data Publisher] end subgraph imu_node [ESP32 IMU Node] imu_pub[IMU Publisher] end thruster_node-->agent_node imu_node-->agent_node","title":"Remote setup (MicroSub)"},{"location":"ROS2-Implementation/setup/","text":"Setup MiniSub ROS components There are several ways to setup MiniSub's ROS components, which best suits your needs depends on which platform and hardware you are using to run the components on. Ubuntu using Ansible To install the required ROS packages from repository on Linux, the playbook in ansible/main.yml can be used to setup your machine. You will still need to source the /opt/ros/{{ ros_distro }}/setup.bash file. The playbook includes additional functionality to configure the host to run MiniSub components, by installing Docker for instance.","title":"Setup MiniSub ROS components"},{"location":"ROS2-Implementation/setup/#setup-minisub-ros-components","text":"There are several ways to setup MiniSub's ROS components, which best suits your needs depends on which platform and hardware you are using to run the components on.","title":"Setup MiniSub ROS components"},{"location":"ROS2-Implementation/setup/#ubuntu-using-ansible","text":"To install the required ROS packages from repository on Linux, the playbook in ansible/main.yml can be used to setup your machine. You will still need to source the /opt/ros/{{ ros_distro }}/setup.bash file. The playbook includes additional functionality to configure the host to run MiniSub components, by installing Docker for instance.","title":"Ubuntu using Ansible"},{"location":"Vehicle/microsub/","text":"MicroSub MicroSub is the successor of TestRig, aiming to be be more hydrodynamically streamlined, rather than just pushing a square box through the water. It consists of several carbon fiber tubes, which are held together using 3D printed brackets. Custom mounting brackets are used to attach various peripherals and electronics housings to the carbon frame. This provides a flexible base to develop future components upon. Bill of Materials Please see this Google Sheet for the materials currently used to build Test Rig and at a later stage the actual MiniSub Vehicle. Custom Components Components are attached to the FC tubes using 3D printed mounting brackets. They wrap halfway around the tubes and are secured in place using zip tie cable wrappers, which fit into designated slots. Thruster Mounts As the name implies, the thruster mounts are responsible for mounting thrusters to the carbon fiber tubing the frame is made up of. Box Mounts The box mounts are used to mount the electronics boxes to the CF tubing.","title":"MicroSub"},{"location":"Vehicle/microsub/#microsub","text":"MicroSub is the successor of TestRig, aiming to be be more hydrodynamically streamlined, rather than just pushing a square box through the water. It consists of several carbon fiber tubes, which are held together using 3D printed brackets. Custom mounting brackets are used to attach various peripherals and electronics housings to the carbon frame. This provides a flexible base to develop future components upon.","title":"MicroSub"},{"location":"Vehicle/microsub/#bill-of-materials","text":"Please see this Google Sheet for the materials currently used to build Test Rig and at a later stage the actual MiniSub Vehicle.","title":"Bill of Materials"},{"location":"Vehicle/microsub/#custom-components","text":"Components are attached to the FC tubes using 3D printed mounting brackets. They wrap halfway around the tubes and are secured in place using zip tie cable wrappers, which fit into designated slots.","title":"Custom Components"},{"location":"Vehicle/microsub/#thruster-mounts","text":"As the name implies, the thruster mounts are responsible for mounting thrusters to the carbon fiber tubing the frame is made up of.","title":"Thruster Mounts"},{"location":"Vehicle/microsub/#box-mounts","text":"The box mounts are used to mount the electronics boxes to the CF tubing.","title":"Box Mounts"},{"location":"Vehicle/testrig/","text":"Test Rig Earlier development was done on a very bare-bones test rig, basically consisting of a watertight box with 2 thruster mounted to the bottom. The Test Rig wass not meant to be submersible, instead it floats around the surface, to test control mechanics and electronics. Bill of Materials Please see this Google Sheet for the materials currently used to build Test Rig and at a later stage the actual MiniSub Vehicle. Custom Components 3D Printed Motor Mount Note This motor mount has some serious design issues and probably shouldn't be used as-is. A 3D printed motor mount is used to attach the thrusters to the electronics housing. STEP and STL files are provided here .","title":"Test Rig"},{"location":"Vehicle/testrig/#test-rig","text":"Earlier development was done on a very bare-bones test rig, basically consisting of a watertight box with 2 thruster mounted to the bottom. The Test Rig wass not meant to be submersible, instead it floats around the surface, to test control mechanics and electronics.","title":"Test Rig"},{"location":"Vehicle/testrig/#bill-of-materials","text":"Please see this Google Sheet for the materials currently used to build Test Rig and at a later stage the actual MiniSub Vehicle.","title":"Bill of Materials"},{"location":"Vehicle/testrig/#custom-components","text":"","title":"Custom Components"},{"location":"Vehicle/testrig/#3d-printed-motor-mount","text":"Note This motor mount has some serious design issues and probably shouldn't be used as-is. A 3D printed motor mount is used to attach the thrusters to the electronics housing. STEP and STL files are provided here .","title":"3D Printed Motor Mount"}]}